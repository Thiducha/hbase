<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

  <property>
    <name>hbase.cluster.distributed</name>
    <value>true</value>
  </property>

  <property>
    <name>hbase.zookeeper.quorum</name>
    <value>HBASE_IT_BOX_0</value>
  </property>

  <property>
    <name>hbase.zookeeper.property.clientPort</name>
    <value>2181</value>
  </property>

  <property>
    <name>hbase.zookeeper.property.dataDir</name>
    <value>${user.home}/tmp-recotest/data/zookeeper</value>
    <!-- subdir of hdfs data dir to have deleted -->
  </property>

  <property>
    <name>dfs.replication</name>
    <value>3</value>
  </property>

  <property>
    <name>hbase.rootdir</name>
    <value>hdfs://HBASE_IT_BOX_0/hbase</value>
  </property>

  <property>
    <name>dfs.client.read.shortcircuit</name>
    <value>false</value>
    <!-- should be yes, -->
  </property>

  <property>
    <name>hbase.defaults.for.version.skip</name>
    <value>true</value>
  </property>

  <property>  <!-- Can't be activated on amazon, required for any other config -->
    <name>hbase.status.multicast.address.ip</name>
    <value>226.1.1.3</value>
  </property>


  <property>
    <name>hbase.status.multicast.address.port</name>
    <value>6100</value>
  </property>

  <!--property>
  <name>hbase.status.publisher.class</name>
    <value>org.apache.hadoop.hbase.master.ClusterStatusPublisher$MulticastPublisher</value>
  </property>

  <property>
    <name>hbase.status.listener.class</name>
    <value>org.apache.hadoop.hbase.client.ClusterStatusListener$MulticastListener</value>
  </property-->

  <property>
    <name>hbase.rpc.timeout</name>
    <value>180000</value>
    <description>
      This is for the RPC layer to define how long HBase client applications
      take for a remote call to time out. It uses pings to check connections
      but will eventually throw a TimeoutException.
      The default value is 60000ms(60s).
    </description>
  </property>

  <property>
    <name>zookeeper.session.timeout</name>
    <value>40000</value>
    <!-- to be decreased once master marks the nodes as stale -->
    <description>ZooKeeper session timeout.
      HBase passes this to the zk quorum as suggested maximum time for a
      session (This setting becomes zookeeper's 'maxSessionTimeout'). See
      http://hadoop.apache.org/zookeeper/docs/current/zookeeperProgrammers.html#ch_zkSessions
      "The client sends a requested timeout, the server responds with the
      timeout that it can give the client. " In milliseconds.
    </description>
  </property>

  <property>
    <name>hbase.client.retries.number</name>
    <value>20</value>
    <description>Maximum retries. Used as maximum for all retryable
      operations such as fetching of the root region from root region
      server, getting a cell's value, starting a row update, etc.
      Default: 10.
    </description>
  </property>

  <property>
    <name>hbase.master.distributed.log.replay</name>
    <value>true</value>
  </property>


  <property>
    <name>hbase.regionserver.checksum.verify</name>
    <value>true</value>
  </property>


  <property>
    <name>hbase.regionserver.global.memstore.upperLimit</name>
    <value>0.4</value>
    <description>Maximum size of all memstores in a region server before new
      updates are blocked and flushes are forced. Defaults to 40% of heap
    </description>
  </property>
  <property>
    <name>hbase.regionserver.global.memstore.lowerLimit</name>
    <value>0.35</value>
    <description>When memstores are being forced to flush to make room in
      memory, keep flushing until we hit this mark. Defaults to 35% of heap.
      This value equal to hbase.regionserver.global.memstore.upperLimit causes
      the minimum possible flushing to occur when updates are blocked due to
      memstore limiting.
    </description>
  </property>
  <property>
    <name>hbase.hregion.memstore.mslab.enabled</name>
    <value>true</value>
    <description>
      Enables the MemStore-Local Allocation Buffer,
      a feature which works to prevent heap fragmentation under
      heavy write loads. This can reduce the frequency of stop-the-world
      GC pauses on large heaps.
    </description>
  </property>
  <property>
    <name>hbase.hregion.max.filesize</name>
    <value>107374182400</value>
    <description>
      Maximum HStoreFile size. If any one of a column families' HStoreFiles has
      grown to exceed this value, the hosting HRegion is split in two.
      Default: 1G.
    </description>
  </property>
  <property>
    <name>hbase.hstore.compactionThreshold</name>
    <value>3</value>
    <description>
      If more than this number of HStoreFiles in any one HStore
      (one HStoreFile is written per flush of memstore) then a compaction
      is run to rewrite all HStoreFiles files as one. Larger numbers
      put off compaction but when it runs, it takes longer to complete.
    </description>
  </property>
  <property>
    <name>hbase.hstore.blockingStoreFiles</name>
    <value>7</value>
    <description>
      If more than this number of StoreFiles in any one Store
      (one StoreFile is written per flush of MemStore) then updates are
      blocked for this HRegion until a compaction is completed, or
      until hbase.hstore.blockingWaitTime has been exceeded.
    </description>
  </property>
  <property>
    <name>hfile.block.cache.size</name>
    <value>0.25</value>
    <description>
      Percentage of maximum heap (-Xmx setting) to allocate to block cache
      used by HFile/StoreFile. Default of 0.25 means allocate 25%.
      Set to 0 to disable but it's not recommended.
    </description>
  </property>

  <property>
    <name>dfs.client.read.shortcircuit</name>
    <value>true</value>
    <description>Enable/Disable short circuit read for your client.
      Hadoop servers should be configured to allow short circuit read
      for the hbase user for this to take effect
    </description>
  </property>

  <property>
    <name>dfs.client.read.shortcircuit.skip.checksum</name>
    <value>true</value>
    <description>Enable/disbale skipping the checksum check</description>
  </property>


</configuration>
